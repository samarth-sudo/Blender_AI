"""
Base template utilities for Blender Python scripts.

This module contains common functions used across all simulation types:
- Scene setup (clearing default objects)
- Camera configuration
- Lighting setup
- Material creation
- Object creation helpers

For beginners: Every Blender Python script needs these foundations.
"""


def get_base_template() -> str:
    """
    Get the base template that all Blender scripts should include.

    Returns:
        Python code string with imports and basic setup
    """
    return '''"""
Auto-generated Blender simulation script.
Generated by Blender AI Simulation Generator.
"""

import bpy
import math
from mathutils import Vector


def clear_scene():
    """
    Delete all objects from the scene.

    In Blender, the default scene contains:
    - A cube
    - A camera
    - A light
    We remove these to start with a clean slate.
    """
    # Select all objects
    bpy.ops.object.select_all(action='SELECT')

    # Delete selected objects
    bpy.ops.object.delete()

    print("Scene cleared")


def create_material(name, color=(0.8, 0.8, 0.8, 1.0), roughness=0.5, metallic=0.0):
    """
    Create a new material with specified properties.

    Args:
        name: Material name
        color: RGBA color tuple (values 0-1)
        roughness: Surface roughness 0-1 (0=glossy, 1=rough)
        metallic: Metallic property 0-1 (0=dielectric, 1=metal)

    Returns:
        bpy.types.Material object
    """
    # Create new material
    mat = bpy.data.materials.new(name=name)
    mat.use_nodes = True

    # Get the Principled BSDF node (standard PBR shader)
    bsdf = mat.node_tree.nodes.get("Principled BSDF")

    if bsdf:
        # Set base color
        bsdf.inputs["Base Color"].default_value = color
        # Set roughness (how shiny the surface is)
        bsdf.inputs["Roughness"].default_value = roughness
        # Set metallic (metal vs non-metal)
        bsdf.inputs["Metallic"].default_value = metallic

    return mat


def apply_material(obj, material):
    """
    Apply a material to an object.

    Args:
        obj: Blender object
        material: bpy.types.Material
    """
    # Clear existing materials
    obj.data.materials.clear()
    # Add new material
    obj.data.materials.append(material)
'''


def get_scene_setup() -> str:
    """
    Get scene setup code (frame range, render settings).

    Returns:
        Python code string
    """
    return '''
def setup_scene(frame_start=1, frame_end=250, frame_rate=24):
    """
    Configure scene settings.

    Args:
        frame_start: First frame of animation
        frame_end: Last frame of animation
        frame_rate: Frames per second (typically 24 or 30)
    """
    scene = bpy.context.scene

    # Set frame range
    scene.frame_start = frame_start
    scene.frame_end = frame_end

    # Set frame rate
    scene.render.fps = frame_rate

    # Set render resolution (1080p)
    scene.render.resolution_x = 1920
    scene.render.resolution_y = 1080
    scene.render.resolution_percentage = 100

    # Use Cycles render engine for realistic rendering
    scene.render.engine = 'CYCLES'

    # GPU acceleration if available
    scene.cycles.device = 'GPU'

    print(f"Scene configured: frames {frame_start}-{frame_end} @ {frame_rate} fps")
'''


def get_camera_setup() -> str:
    """
    Get camera setup code.

    Returns:
        Python code string
    """
    return '''
def setup_camera(location=(7.0, -7.0, 5.0), rotation=(63.0, 0.0, 45.0), focal_length=50.0):
    """
    Create and position camera.

    Args:
        location: Camera position (x, y, z) in meters
        rotation: Camera rotation (x, y, z) in degrees
        focal_length: Camera focal length in mm (35mm=wide, 85mm=portrait)

    Returns:
        Camera object
    """
    # Create camera data block
    camera_data = bpy.data.cameras.new(name="Camera")
    camera_data.lens = focal_length

    # Create camera object and link to scene
    camera_obj = bpy.data.objects.new("Camera", camera_data)
    bpy.context.collection.objects.link(camera_obj)

    # Set camera location
    camera_obj.location = location

    # Set camera rotation (convert degrees to radians)
    camera_obj.rotation_euler = (
        math.radians(rotation[0]),
        math.radians(rotation[1]),
        math.radians(rotation[2])
    )

    # Set as active camera
    bpy.context.scene.camera = camera_obj

    print(f"Camera created at {location}")
    return camera_obj
'''


def get_lighting_setup() -> str:
    """
    Get lighting setup code.

    Returns:
        Python code string
    """
    return '''
def setup_lighting(light_type='SUN', energy=1.5, location=(5.0, 5.0, 10.0), rotation=(45.0, 0.0, 45.0)):
    """
    Create scene lighting.

    Args:
        light_type: Type of light ('SUN', 'POINT', 'SPOT', 'AREA')
        energy: Light strength in watts (higher = brighter)
        location: Light position (x, y, z)
        rotation: Light rotation (x, y, z) in degrees

    Returns:
        Light object

    Light Types:
    - SUN: Directional light (like the sun), position doesn't matter
    - POINT: Omnidirectional point light (like a light bulb)
    - SPOT: Cone-shaped spotlight
    - AREA: Rectangular area light (soft shadows)
    """
    # Create light data block
    light_data = bpy.data.lights.new(name="Light", type=light_type)
    light_data.energy = energy

    # For sun lights, angle controls shadow softness
    if light_type == 'SUN':
        light_data.angle = math.radians(5.0)

    # Create light object and link to scene
    light_obj = bpy.data.objects.new("Light", light_data)
    bpy.context.collection.objects.link(light_obj)

    # Set light location
    light_obj.location = location

    # Set light rotation
    light_obj.rotation_euler = (
        math.radians(rotation[0]),
        math.radians(rotation[1]),
        math.radians(rotation[2])
    )

    print(f"{light_type} light created with energy {energy}")
    return light_obj
'''


def get_object_creation_helpers() -> str:
    """
    Get helper functions for creating common objects.

    Returns:
        Python code string
    """
    return '''
def create_cube(name="Cube", location=(0, 0, 0), scale=1.0):
    """Create a cube object."""
    bpy.ops.mesh.primitive_cube_add(location=location, scale=(scale, scale, scale))
    obj = bpy.context.active_object
    obj.name = name
    return obj


def create_sphere(name="Sphere", location=(0, 0, 0), scale=1.0, subdivisions=2):
    """Create a UV sphere object."""
    bpy.ops.mesh.primitive_uv_sphere_add(
        location=location,
        scale=(scale, scale, scale),
        segments=32,
        ring_count=16
    )
    obj = bpy.context.active_object
    obj.name = name

    # Subdivide for smoother appearance
    bpy.ops.object.modifier_add(type='SUBSURF')
    obj.modifiers["Subdivision"].levels = subdivisions

    return obj


def create_plane(name="Plane", location=(0, 0, 0), scale=10.0):
    """Create a plane (flat surface) object."""
    bpy.ops.mesh.primitive_plane_add(location=location, scale=(scale, scale, scale))
    obj = bpy.context.active_object
    obj.name = name
    return obj


def create_cylinder(name="Cylinder", location=(0, 0, 0), scale=1.0):
    """Create a cylinder object."""
    bpy.ops.mesh.primitive_cylinder_add(location=location, scale=(scale, scale, scale))
    obj = bpy.context.active_object
    obj.name = name
    return obj


def create_cone(name="Cone", location=(0, 0, 0), scale=1.0):
    """Create a cone object."""
    bpy.ops.mesh.primitive_cone_add(location=location, scale=(scale, scale, scale))
    obj = bpy.context.active_object
    obj.name = name
    return obj
'''


def get_save_file_code() -> str:
    """
    Get code for saving the .blend file.

    Returns:
        Python code string
    """
    return '''
def save_blend_file(filepath):
    """
    Save the Blender scene to a .blend file.

    Args:
        filepath: Path where to save the file (e.g., "/tmp/simulation.blend")
    """
    bpy.ops.wm.save_as_mainfile(filepath=filepath)
    print(f"Saved to: {filepath}")
'''


def get_complete_base_template() -> str:
    """
    Get a complete base template with all common functions.

    Returns:
        Complete Python code string
    """
    return "\n".join([
        get_base_template(),
        get_scene_setup(),
        get_camera_setup(),
        get_lighting_setup(),
        get_object_creation_helpers(),
        get_save_file_code(),
    ])
