"""
Pydantic data models for the Blender AI Simulation Generator.

These models define the data structures used throughout the agent pipeline
with full type safety and validation.
"""

from enum import Enum
from typing import List, Dict, Optional, Any
from datetime import datetime
from pydantic import BaseModel, Field, validator


class SimulationType(str, Enum):
    """Supported simulation types."""
    RIGID_BODY = "rigid_body"
    FLUID_SMOKE = "fluid_smoke"
    FLUID_FIRE = "fluid_fire"
    FLUID_LIQUID = "fluid_liquid"
    CLOTH = "cloth"
    SOFT_BODY = "soft_body"


class ObjectType(str, Enum):
    """Supported object types."""
    CUBE = "cube"
    SPHERE = "sphere"
    CYLINDER = "cylinder"
    CONE = "cone"
    PLANE = "plane"
    TORUS = "torus"
    MONKEY = "monkey"  # Suzanne mesh


class MaterialProperties(BaseModel):
    """Physics properties for a material."""
    name: str
    density: float = Field(gt=0, description="Density in kg/m³")
    friction: float = Field(ge=0, le=1, description="Friction coefficient")
    restitution: float = Field(ge=0, le=1, description="Bounciness/elasticity")
    linear_damping: float = Field(ge=0, le=1, default=0.04)
    angular_damping: float = Field(ge=0, le=1, default=0.10)
    collision_shape: str = Field(default="CONVEX_HULL")
    collision_margin: float = Field(gt=0, default=0.001)


class SimulationObject(BaseModel):
    """Definition of an object in the simulation."""
    name: str
    object_type: ObjectType
    count: int = Field(ge=1, le=1000, description="Number of instances")
    material: str = Field(default="default")
    scale: float = Field(gt=0, default=1.0)
    position: Optional[List[float]] = Field(default=None)
    rotation: Optional[List[float]] = Field(default=None)
    is_static: bool = Field(default=False, description="Is this object passive/static?")

    # Populated by Physics Validator
    physics_properties: Optional[MaterialProperties] = None

    @validator('position')
    def validate_position(cls, v):
        if v is not None and len(v) != 3:
            raise ValueError('Position must be [x, y, z]')
        return v

    @validator('rotation')
    def validate_rotation(cls, v):
        if v is not None and len(v) != 3:
            raise ValueError('Rotation must be [x, y, z] in degrees')
        return v


class PhysicsSettings(BaseModel):
    """Global physics settings for the simulation."""
    gravity: float = Field(default=-9.81, description="Gravity in m/s²")
    substeps_per_frame: int = Field(ge=1, le=20, default=10)
    solver_iterations: int = Field(ge=1, le=100, default=10)
    time_scale: float = Field(gt=0, default=1.0)

    # Rigid body specific
    use_split_impulse: bool = Field(default=True)

    # Fluid specific
    resolution_max: Optional[int] = Field(default=None, ge=32, le=512)
    viscosity: Optional[float] = Field(default=None, ge=0)

    # Cloth specific
    quality_steps: Optional[int] = Field(default=None, ge=1, le=10)
    air_damping: Optional[float] = Field(default=None, ge=0, le=1)


class CameraSettings(BaseModel):
    """Camera configuration."""
    location: List[float] = Field(default=[7.0, -7.0, 5.0])
    rotation: List[float] = Field(default=[63.0, 0.0, 45.0])
    focal_length: float = Field(default=50.0, ge=10.0, le=200.0)
    auto_frame_objects: bool = Field(default=True)


class LightingSettings(BaseModel):
    """Lighting configuration."""
    type: str = Field(default="SUN")
    energy: float = Field(default=1.5, gt=0)
    location: List[float] = Field(default=[5.0, 5.0, 10.0])
    rotation: List[float] = Field(default=[45.0, 0.0, 45.0])


class SimulationPlan(BaseModel):
    """
    Structured simulation plan generated by the Planner Agent.
    This is the core data structure passed between agents.
    """
    simulation_type: SimulationType
    objects: List[SimulationObject] = Field(min_items=1)
    physics_settings: PhysicsSettings
    camera_settings: CameraSettings = Field(default_factory=CameraSettings)
    lighting_settings: LightingSettings = Field(default_factory=LightingSettings)

    duration_frames: int = Field(ge=1, le=1000, description="Animation length in frames")
    frame_rate: int = Field(default=24, ge=1, le=60)

    # User intent for refinement
    user_prompt: str

    # Metadata
    created_at: datetime = Field(default_factory=datetime.now)

    class Config:
        json_schema_extra = {
            "example": {
                "simulation_type": "rigid_body",
                "objects": [
                    {
                        "name": "wooden_block",
                        "object_type": "cube",
                        "count": 20,
                        "material": "wood_pine",
                        "scale": 1.0
                    },
                    {
                        "name": "ground",
                        "object_type": "plane",
                        "count": 1,
                        "material": "concrete",
                        "scale": 10.0,
                        "is_static": True
                    }
                ],
                "physics_settings": {
                    "gravity": -9.81,
                    "substeps_per_frame": 10
                },
                "duration_frames": 250,
                "user_prompt": "20 wooden blocks falling on concrete floor"
            }
        }


class ValidationResult(BaseModel):
    """Result from validation agents (Physics, Syntax, Quality)."""
    is_valid: bool
    score: float = Field(ge=0.0, le=1.0)
    errors: List[str] = Field(default_factory=list)
    warnings: List[str] = Field(default_factory=list)
    metadata: Dict[str, Any] = Field(default_factory=dict)


class ExecutionResult(BaseModel):
    """Result from Blender execution."""
    success: bool
    blend_file_path: Optional[str] = None
    stdout: str = Field(default="")
    stderr: str = Field(default="")
    execution_time_seconds: float
    frame_count: int = 0
    error_message: Optional[str] = None


class QualityMetrics(BaseModel):
    """Detailed quality metrics from Quality Validator Agent."""
    object_count_correct: bool
    has_physics_setup: bool
    has_camera: bool
    has_lighting: bool

    # Physics-specific
    rigid_body_count: Optional[int] = None
    max_interpenetration: Optional[float] = None

    # Visual quality
    lighting_intensity: Optional[float] = None
    camera_in_bounds: bool = True

    # Overall score
    quality_score: float = Field(ge=0.0, le=1.0)

    # Issues found
    issues: List[str] = Field(default_factory=list)


class SimulationResult(BaseModel):
    """
    Final result returned to the user.
    Contains all information about the generated simulation.
    """
    success: bool
    blend_file: Optional[str] = None
    preview_images: List[str] = Field(default_factory=list)

    # Pipeline data
    plan: Optional[SimulationPlan] = None
    quality_metrics: Optional[QualityMetrics] = None

    # Execution info
    total_time_seconds: float
    agent_times: Dict[str, float] = Field(default_factory=dict)

    # Error handling
    errors: List[str] = Field(default_factory=list)
    warnings: List[str] = Field(default_factory=list)

    # Refinement
    refinement_count: int = 0

    created_at: datetime = Field(default_factory=datetime.now)


class ErrorType(str, Enum):
    """Error categories for recovery strategies."""
    SYNTAX_ERROR = "syntax_error"
    API_ERROR = "api_error"
    PHYSICS_ERROR = "physics_error"
    MEMORY_ERROR = "memory_error"
    LOGIC_ERROR = "logic_error"
    REQUIREMENTS_ERROR = "requirements_error"


class AgentError(BaseModel):
    """Structured error information."""
    error_type: ErrorType
    agent_name: str
    message: str
    recoverable: bool = True
    suggested_action: Optional[str] = None
    timestamp: datetime = Field(default_factory=datetime.now)


class BlenderCode(BaseModel):
    """Generated Blender Python code with metadata."""
    code: str
    template_used: Optional[str] = None
    complexity_score: float = Field(ge=0.0, le=1.0, default=0.5)
    estimated_execution_time: Optional[int] = None  # seconds

    class Config:
        json_schema_extra = {
            "example": {
                "code": "import bpy\n\nbpy.ops.mesh.primitive_cube_add()",
                "template_used": "rigid_body_basic",
                "complexity_score": 0.3
            }
        }
